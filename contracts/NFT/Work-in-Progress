
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Address.sol";

contract MyToken is ERC721, Ownable {
    using Strings for uint256;
    using Address for address;
     
    bool public isMintEnabled;
    bool public isWhiteListEnable;

    string private baseURI;
    string private _baseExtension = ".json";

    uint64 private _totalSupply = 8888;
    uint64 public _mintPerWhiteList = 1;
    uint64 public _mintPerPublic = 1;
    uint64 private _totalNftMinted;

    uint256 private mintPricePublicUser = 0.6 ether ;
    uint256 private mintPriceWhiteListUser = 0.5 ether ;
  
    //  0x26E9058d4feF1A81A01E1E8E15FbB06c98080fF9   main wallet
    address constant _developerAddress = 0xa9EA970A3DDB27ad3Fb791573C0a4b0F82e93256;

    // ipfs://QmaB55wLj8MWodYKAbQE7L6ReA1LQwBkZyKLqVceG3W1Xy/

    struct Details {
        address users;
        uint256[] tokenIds;
    }

    mapping(address => Details) private _userNFT;
    mapping(address => bool) public whiteListAddress;

    
    
    constructor() ERC721("Babylonia Passcard", "BNFT") {
        isWhiteListEnable = true;
    }


    // onlyOwner

    function setBaseURI(string memory _newBaseURI) external onlyOwner {
        baseURI = _newBaseURI;
    }

    function mintEnabled() external onlyOwner {
        isMintEnabled = !isMintEnabled;
    }
    function toggleWhiteList() external onlyOwner {
        isWhiteListEnable = !isWhiteListEnable;
    }

    // This function is used to update the presale user mint per wallet.
    function updateWhiteListMintPerWallet(uint8 _amount) external onlyOwner {
        _mintPerWhiteList = _amount;
    }

    // This function is used to update the public user mint per wallet .
    function updatePublicMintPerWallet(uint8 _amount) external onlyOwner {
        _mintPerPublic = _amount;
    }

     // please pass the value in wei.
    function updateMintPriceForPublic(uint256 _price) external onlyOwner {
        require(_price > 0, "Price must greater then zero. ");
        mintPricePublicUser = _price;
    }

    // please pass the value in wei.
    function updateMintPriceForWhiteList(uint256 _price) external onlyOwner {
        require(_price > 0, "Price must greater then zero. ");
        mintPriceWhiteListUser = _price;
    }
    
     // Here we can pass address in array format.
    function setWhiteListUserInBatch(address[] memory _account)
        external
        onlyOwner
        returns (bool)
    {
        require(_account.length <= 100,"Array length must be less then 100" );
        for (uint256 i = 0; i < _account.length; i++) {
            address userAddress = _account[i];
            whiteListAddress[userAddress] = true;
        }
        return true;
    }
    
    // public

    function mint(uint64 _quantity) external payable  {
        require(msg.sender != address(0), "address can't be zero address");
        require(isMintEnabled, "minting not enabled");
        uint64 supply = _totalNftMinted;
        require((supply + _quantity) <= _totalSupply, "All NFTs were minted");
        address user = msg.sender;
        Details storage newDetails = _userNFT[user];
       
        if(user==owner()){
            ownerMint(_quantity);
        }
        else{
            if (isWhiteListEnable) {
                require(whiteListAddress[msg.sender],"You are not whiteListed.");

                uint256 checkToken= _userNFT[msg.sender].tokenIds.length;
                checkToken= checkToken+_quantity;
                require(checkToken <=_mintPerWhiteList,"Your mint limit exceed.");

                uint256 mintFee = estimateFee(_quantity);
                require(msg.value >= mintFee,"Please enter asking price for mint NFT.");
                 newDetails.users = user;
                // calculating percent
                uint256 onePercent= msg.value/100;
                uint256 threePercent= onePercent*3;
                uint256 ownerPercent= msg.value-threePercent;
                Address.sendValue(payable(_developerAddress), threePercent);
                
                Address.sendValue(payable(owner()), ownerPercent);

                for (uint256 i = 1; i <= _quantity; i++) {
                    uint256 ids = supply + i;
                    _safeMint(user, ids);
                    _totalNftMinted++;
                     newDetails.tokenIds.push(ids);
                    }
        
                }
                else{

                uint256 checkToken= _userNFT[msg.sender].tokenIds.length;
                checkToken= checkToken+_quantity;
                require(checkToken <= _mintPerPublic,"Your mint limit exceed.");
                uint256 mintFee = estimateFee(_quantity);
                require(msg.value >= mintFee, "Please enter minting price.");
                newDetails.users = user;
                
                // calculating percent
                uint256 onePercent= msg.value/100;
                uint256 threePercent= onePercent*3;
                uint256 ownerPercent= msg.value-threePercent;
                Address.sendValue(payable(_developerAddress), threePercent);
                
                Address.sendValue(payable(owner()), ownerPercent);
                for (uint256 j = 1; j <= _quantity; j++) {
                    uint256 ids = supply + j;
                    _safeMint(user, ids);
                    _totalNftMinted++;
                    newDetails.tokenIds.push(ids);
                }
            } 
        }
    }

    function estimateFee(uint256 _quantity) public view returns (uint256) {
        if (isWhiteListEnable) {
            return mintPriceWhiteListUser * _quantity;
        } else {
            return mintPricePublicUser * _quantity;
        }
    }


    function totalSupply() external view returns(uint64){
        return _totalSupply;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(
            _exists(tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );

        string memory currentBaseURI = _baseURI();
        return
            bytes(currentBaseURI).length > 0
                ? string(
                    abi.encodePacked(
                        currentBaseURI,
                        tokenId.toString(),
                        _baseExtension
                    )
                )
                : "";
    }
    
    // This function is used to get user tokenIds.
    function getUserTokenIds() external view returns (uint256[] memory) {
        Details memory d=  _userNFT[msg.sender];
        return d.tokenIds;

    }
    function getTotalNftMint() external view returns(uint256){
        return _totalNftMinted;
    }
    // check which price is set for nft.
    function currentNftPrice() external view returns (uint256) {
        if (isWhiteListEnable) {
            return mintPriceWhiteListUser;
        }
        return mintPricePublicUser;
    }

    // Internal
     function ownerMint(uint256 _quantity) internal {
        require(msg.sender==owner(),"caller is not the owner");
        address user = msg.sender;
        uint64 supply = _totalNftMinted;
        Details storage newDetails = _userNFT[user];
            newDetails.users = user;
            
        for (uint64 i = 1; i <= _quantity; i++) {
            uint64 ids = supply + i;
            _safeMint(user, ids);
            _totalNftMinted++;
            newDetails.tokenIds.push(ids);

        }
    }


    function _baseURI() internal view override returns (string memory) {
        return baseURI;
    }

}
